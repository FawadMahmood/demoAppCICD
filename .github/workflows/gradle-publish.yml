name: Android Build ## name of the workflow

on:
  workflow_dispatch: # To trigger manual build
  release:
    types: [published] # only run the workflow when a new release has been published

jobs:
  android-build:
    name: Android Build
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version

    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v2


      - name: Update Version
        run: |
          # Get the current version from the version file
          current_version=$(cat version.json | jq -r .version)

          # Increment the build number (assuming your version follows x.y.z format)
          # Split the version into an array
          IFS='.' read -ra version_parts <<< "$current_version"

          # Increment the last part (the build number)
          version_parts[2]=$((version_parts[2]+1))

          # Create the new version string
          new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"

          # Update the version file
          echo "{\"version\":\"$new_version\"}" > version.json

          # Commit the changes
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git commit -am "Bump version to $new_version [skip ci]"

          # Push the changes to GitHub
          git push origin main
        working-directory: version

      - name: Set up our JDK environment # setup JDK environment: mandatory as we need to build  android project
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11.0.15

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore node_modules from cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies # install project deps with --frozen-lockfile to make sure we will have the same packages version ( very recommended  on running yarn install on ci)
        run: yarn install --frozen-lockfile

      ## configure cash for gradle : will help to reduce build time
      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      # Building and signing App
      - name: Build Android App Bundle
        run: |
          cd android && ./gradlew bundleRelease --no-daemon

      ## Distribute  App to google play alpha track
      - name: Upload App to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON_TEXT }}
          packageName: com.domingo.testingnow
          releaseFiles: android/app/build/outputs/bundle/release/*.aab
          track: internal
          status: draft
          inAppUpdatePriority: 2